@page "/dotnet-to-js-sample-3"
@using BlazorJavaScriptInterop.Components

<h1>Call 'eval' JavaScript functions from .NET</h1>
<p>
    <code>eval</code> evaluates the string parameter as JavaScript and then executes the JavaScript.
    This is very powerful, but also very dangerous! If possible, avoid <code>eval</code> at all cost.
    Using <code>eval</code> could expose your applications to script injection. 
    Read more about <code>eval</code> at 
    <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval">MDN's documenation</a>, including 
    <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#Never_use_eval!">why you should not use it</a>.
</p>
<p>Since <code>eval</code> is a function available on the <code>window</code> object, you can also call it from .NET. Use at your own risk!</p>

<p class="font-weight-bold">Sample:</p>
<DotNetToJsSample3 />

<br><br>

<p class="font-weight-bold">Blazor Source:</p>

<pre style="color:#000000;background:#ffffff;">@@inject IJSRuntime js

<span style="color:#7f0055; ">&lt;</span><span style="color:#7f0055; font-weight:bold; ">button</span> type=<span style="color:#2a00ff; ">"button"</span> class=<span style="color:#2a00ff; ">"btn btn-primary"</span> @@onclick=<span style="color:#2a00ff; ">"ShowEvalWarningAsync"</span><span style="color:#7f0055; ">&gt;</span>Run JavaScript from .NET using EVAL<span style="color:#7f0055; ">&lt;/</span><span style="color:#7f0055; font-weight:bold; ">button</span><span style="color:#7f0055; ">&gt;</span>
<span style="color:#7f0055; ">&lt;</span><span style="color:#7f0055; font-weight:bold; ">br</span><span style="color:#7f0055; ">&gt;</span><span style="color:#7f0055; ">&lt;</span><span style="color:#7f0055; font-weight:bold; ">br</span><span style="color:#7f0055; ">&gt;</span>
<span style="color:#7f0055; ">&lt;</span><span style="color:#7f0055; font-weight:bold; ">div</span> class=<span style="color:#2a00ff; ">"eval-warning alert alert-danger font-weight-bold"</span> role=<span style="color:#2a00ff; ">"alert"</span><span style="color:#7f0055; ">&gt;</span>[WARNING MESSAGE GOES HERE]<span style="color:#7f0055; ">&lt;/</span><span style="color:#7f0055; font-weight:bold; ">div</span><span style="color:#7f0055; ">&gt;</span>

@@code{
  <span style="color:#7f0055; font-weight:bold; ">private</span> async Task ShowEvalWarningAsync()
  {
    <span style="color:#7f0055; font-weight:bold; ">var</span> warning = <span style="color:#2a00ff; ">"</span><span style="color:#2a00ff; ">Using &lt;code&gt;eval&lt;/code&gt; is a huge security risk.</span><span style="color:#2a00ff; ">"</span> +
      <span style="color:#2a00ff; ">"</span><span style="color:#2a00ff; ">&lt;a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#Never_use_eval!\"&gt;</span><span style="color:#2a00ff; ">"</span> +
    <span style="color:#2a00ff; ">"</span><span style="color:#2a00ff; "> Learn more about the risks of using &lt;code&gt;eval&lt;/code&gt; at MDN.</span><span style="color:#2a00ff; ">"</span> +
    <span style="color:#2a00ff; ">"</span><span style="color:#2a00ff; ">&lt;/a&gt;</span><span style="color:#2a00ff; ">"</span>;
    <span style="color:#3f7f59; ">// add null; add the end to prevent .NET from trying to serialize return value to object</span>
    <span style="color:#7f0055; font-weight:bold; ">var</span> scriptToEval = <span style="color:#7f0055; font-weight:bold; ">string</span>.Format(<span style="color:#2a00ff; ">"</span><span style="color:#2a00ff; ">$('.eval-warning').html('{0}');null;</span><span style="color:#2a00ff; ">"</span>, warning);
    await js.InvokeVoidAsync(<span style="color:#2a00ff; ">"</span><span style="color:#2a00ff; ">eval</span><span style="color:#2a00ff; ">"</span>, scriptToEval);
  }
}
</pre>
