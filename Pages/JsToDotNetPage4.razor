@page "/js-to-dotnet-sample-4"
@using BlazorJavaScriptInterop.Components
<h1>Call .NET Blazor component instance methods from JavaScript</h1>
<p>
    In addition to calling .NET methods with simple return values and objects, you can also call .NET methods which return a <code>Task</code> using <code>invokeMethodAsync</code>. <br>
    When invoking a .NET method return a <code>Task</code> from JavaScript, the return value will be a JavaScript <code>Promise</code>. 
</p>
<p>The sample below does the following</p>
<ol>
    <li>A <code>DotNetObjectReference</code> referring to the Blazor component instance is created and passed to JavaScript.</li>
    <li>JavaScript receives the object reference and stores it for future use.</li>
    <li>When the button below is clicked, JavaScript will call the <code>GetWeatherAsync</code> instance method on the object reference.</li>
    <li><code>GetWeatherAsync</code> will use the .NET <code>HttpClient</code> to make an HTTP request to <i>sample-data/weather.json</i>.</li>
    <li>The JSON result is deserialized to a .NET object which is then returned.</li>
    <li>In JavaScript, a <code>Promise</code> was returned by <code>invokeMethodAsync</code>.</li>
    <li>When the .NET function is done requesting the weather data, the object is passed to <code>then</code> callback.</li>
    <li>Inside of the callback, the object is deserialized and printed below the button.</li>
</ol>
<JsToDotNetSample4 />
<br><br>

<p class="font-weight-bold">JavaScript Source:</p>
<pre style="color:#000000;background:#ffffff;">window.jsToDotNetSamples = {
    dotNetReference: <span style="color:#7f0055; font-weight:bold; ">null</span>,
    setDotNetReference: <span style="color:#7f0055; font-weight:bold; ">function</span>(dotNetReference)
    {
        <span style="color:#7f0055; font-weight:bold; ">this</span>.dotNetReference = dotNetReference;
    },
    getWeatherDataFromDotNet: <span style="color:#7f0055; font-weight:bold; ">function</span>(node){
        <span style="color:#7f0055; font-weight:bold; ">this</span>.dotNetReference.invokeMethodAsync(<span style="color:#2a00ff; ">'</span><span style="color:#2a00ff; ">GetWeatherAsync</span><span style="color:#2a00ff; ">'</span>)
            .then(weatherData =&gt; {
                document.getElementById(<span style="color:#2a00ff; ">'</span><span style="color:#2a00ff; ">weatherCodeBlock</span><span style="color:#2a00ff; ">'</span>).textContent = JSON.<span style="color:#7f0055; font-weight:bold; ">stringify</span>(weatherData);
            });
    }
};
</pre>

<p class="font-weight-bold">Blazor Source:</p>


<pre style="color:#000000;background:#ffffff;">@@implements IDisposable
@@inject IJSRuntime js
@@inject NavigationManager navigationManager

<span style="color:#7f0055; ">&lt;</span><span style="color:#7f0055; font-weight:bold; ">button</span> type=<span style="color:#2a00ff; ">"button"</span> class=<span style="color:#2a00ff; ">"btn btn-primary"</span> onclick=<span style="color:#2a00ff; ">"jsToDotNetSamples.getWeatherDataFromDotNet()"</span><span style="color:#7f0055; ">&gt;</span>Get WeatherData from .NET async task method<span style="color:#7f0055; ">&lt;/</span><span style="color:#7f0055; font-weight:bold; ">button</span><span style="color:#7f0055; ">&gt;</span>
<span style="color:#7f0055; ">&lt;</span><span style="color:#7f0055; font-weight:bold; ">br</span><span style="color:#7f0055; ">&gt;</span><span style="color:#7f0055; ">&lt;</span><span style="color:#7f0055; font-weight:bold; ">br</span><span style="color:#7f0055; ">&gt;</span>
<span style="color:#7f0055; ">&lt;</span><span style="color:#7f0055; font-weight:bold; ">code</span> id=<span style="color:#2a00ff; ">"weatherCodeBlock"</span><span style="color:#7f0055; ">&gt;</span><span style="color:#7f0055; ">&lt;/</span><span style="color:#7f0055; font-weight:bold; ">code</span><span style="color:#7f0055; ">&gt;</span>

@@code{
  <span style="color:#7f0055; font-weight:bold; ">private</span> <span style="color:#7f0055; font-weight:bold; ">static</span> HttpClient httpClient = <span style="color:#7f0055; font-weight:bold; ">new</span> HttpClient();
  <span style="color:#7f0055; font-weight:bold; ">private</span> DotNetObjectReference&lt;JsToDotNetSample4&gt; dotNetObjectReference;

  <span style="color:#7f0055; font-weight:bold; ">protected</span> <span style="color:#7f0055; font-weight:bold; ">override</span> Task OnInitializedAsync()
  {
    dotNetObjectReference = DotNetObjectReference.Create(<span style="color:#7f0055; font-weight:bold; ">this</span>);
    js.InvokeVoidAsync(<span style="color:#2a00ff; ">"</span><span style="color:#2a00ff; ">jsToDotNetSamples.setDotNetReference</span><span style="color:#2a00ff; ">"</span>, dotNetObjectReference);
    <span style="color:#7f0055; font-weight:bold; ">return</span> <span style="color:#7f0055; font-weight:bold; ">base</span>.OnInitializedAsync();
  }

  [JSInvokable]
  <span style="color:#7f0055; font-weight:bold; ">public</span> async Task&lt;<span style="color:#7f0055; font-weight:bold; ">object</span>&gt; GetWeatherAsync()
  {
      <span style="color:#7f0055; font-weight:bold; ">var</span> rootUrl = navigationManager.BaseUri;
      <span style="color:#7f0055; font-weight:bold; ">return</span> await httpClient.GetFromJsonAsync&lt;<span style="color:#7f0055; font-weight:bold; ">object</span>&gt;($<span style="color:#2a00ff; ">"</span><span style="color:#2a00ff; ">{rootUrl}/sample-data/weather.json</span><span style="color:#2a00ff; ">"</span>);
  }

  <span style="color:#7f0055; font-weight:bold; ">public</span> <span style="color:#7f0055; font-weight:bold; ">void</span> Dispose()
  {
    dotNetObjectReference?.Dispose();
  }
}
</pre>
